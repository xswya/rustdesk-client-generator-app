name: Build RustDesk Client (Final v3)

on:
  workflow_dispatch:
    inputs:
      config_json:
        description: 'Configuration JSON'
        required: true
        type: string
      executable_name:
        description: 'Executable name'
        required: true
        type: string
        default: 'rustdesk-custom'
      rustdesk_branch:
        description: 'RustDesk branch'
        required: false
        type: string
        default: 'master'
      target_arch:
        description: 'Target architecture'
        required: false
        type: choice
        options:
          - x86_64
          - aarch64
        default: 'x86_64'
      enable_portable:
        description: 'Enable portable mode'
        required: false
        type: boolean
        default: false
      create_installer:
        description: 'Create installer'
        required: false
        type: boolean
        default: true
      enable_debug:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

env:
  RUST_VERSION: 1.75
  LLVM_VERSION: 15.0
  VCPKG_COMMIT_ID: 6f29f12e82a8293156836ad81cc9bf5af41fe836

jobs:
  build-windows:
    name: Build RustDesk for Windows
    runs-on: windows-2022
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Checkout RustDesk
      uses: actions/checkout@v4
      with:
        repository: rustdesk/rustdesk
        ref: ${{ inputs.rustdesk_branch }}
        submodules: recursive
        path: rustdesk
        
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ env.LLVM_VERSION }}
        
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-pc-windows-msvc
        components: "rustfmt"
        
    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: windows-2022
        workspaces: "rustdesk -> target"
        
    - name: Setup vcpkg with Github Actions binary cache
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: C:\vcpkg
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
        doNotCache: false
        
    - name: Install system dependencies
      shell: powershell
      run: |
        Write-Host "=== Installing system dependencies ==="
        choco install nsis -y --no-progress
        Write-Host "[SUCCESS] System dependencies installed"
        
    - name: Setup vcpkg environment
      shell: powershell
      run: |
        Write-Host "=== Setting up vcpkg environment ==="
        Write-Host "Copying vcpkg.json to rustdesk directory..."
        $source = "$env:GITHUB_WORKSPACE\vcpkg.json"
        $dest = "$env:GITHUB_WORKSPACE\rustdesk\vcpkg.json"
        if (-not (Test-Path $source)) {
          Write-Host "[ERROR] Source vcpkg.json not found: $source"
          exit 1
        }
        Copy-Item $source $dest -Force
        Write-Host "[SUCCESS] vcpkg.json copied successfully"
        
    - name: Install vcpkg dependencies
      shell: powershell
      run: |
        Write-Host "=== Installing vcpkg dependencies ==="
        cd "$env:GITHUB_WORKSPACE\rustdesk"
        Write-Host "Running vcpkg install..."
        & "$env:VCPKG_ROOT\vcpkg.exe" install --triplet x64-windows-static --x-install-root="$env:VCPKG_ROOT\installed"
        if ($LASTEXITCODE -ne 0) {
          Write-Host "[ERROR] vcpkg install failed with exit code: $LASTEXITCODE"
          exit 1
        }
        Write-Host "[SUCCESS] vcpkg dependencies installed successfully"
        
    - name: Apply configuration
      shell: powershell
      run: |
        Write-Host "=== Applying configuration ==="
        cd "$env:GITHUB_WORKSPACE\rustdesk"
        New-Item -Path "src\ui" -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
        '${{ inputs.config_json }}' | Out-File -FilePath "src\ui\config.json" -Encoding UTF8
        try {
          $config = '${{ inputs.config_json }}' | ConvertFrom-Json
          Write-Host "[DEBUG] Configuration parsed successfully"
        } catch {
          Write-Host "[ERROR] Failed to parse configuration JSON: $($_.Exception.Message)"
          exit 1
        }
        if (-not $config.server.RENDEZVOUS_SERVER) { Write-Host "[ERROR] RENDEZVOUS_SERVER is required but not provided"; exit 1 }
        if (-not $config.server.RS_PUB_KEY) { Write-Host "[ERROR] RS_PUB_KEY is required but not provided"; exit 1 }
        if (-not $config.branding.APP_NAME) { $config.branding.APP_NAME = "rustdesk" }
        if (-not $config.branding.PRODUCT_NAME) { $config.branding.PRODUCT_NAME = $config.branding.APP_NAME }
        $rustConfigLines = @()
        $rustConfigLines += "// Auto-generated configuration"
        $rustConfigLines += "pub const RENDEZVOUS_SERVER: &str = `"$($config.server.RENDEZVOUS_SERVER)`";"
        $rustConfigLines += "pub const RELAY_SERVER: &str = `"$($config.server.RELAY_SERVER)`";"
        $rustConfigLines += "pub const API_SERVER: &str = `"$($config.server.API_SERVER)`";"
        $rustConfigLines += "pub const KEY: &str = `"$($config.server.RS_PUB_KEY)`";"
        $rustConfigLines += "pub const PRODUCT_NAME: &str = `"$($config.branding.PRODUCT_NAME)`";"
        $rustConfigLines += "pub const APP_NAME: &str = `"$($config.branding.APP_NAME)`";"
        $rustConfigLines | Out-File -FilePath "src\config.rs" -Encoding UTF8
        if (Test-Path "src\config.rs") { Write-Host "[SUCCESS] config.rs created" } else { Write-Host "[ERROR] Failed to create config.rs"; exit 1 }
        if (Test-Path "Cargo.toml") {
          $cargoContent = Get-Content "Cargo.toml" -Raw
          if ($config.branding.APP_NAME -ne "rustdesk") {
            $cargoContent = $cargoContent -replace 'name = "rustdesk"', "name = `"$($config.branding.APP_NAME)`""
            $cargoContent = $cargoContent -replace 'default-run = "rustdesk"', "default-run = `"$($config.branding.APP_NAME)`""
          }
          $cargoContent | Out-File -FilePath "Cargo.toml" -Encoding UTF8
        }
        Write-Host "[SUCCESS] Configuration applied successfully"
        
    - name: Generate inline module
      shell: powershell
      run: |
        Write-Host "=== Generating inline UI module ==="
        cd "$env:GITHUB_WORKSPACE\rustdesk"
        $inlineContentLines = @(
          "// Minimal inline module for compilation",
          "#[inline]",
          "pub fn get_index() -> String { r#`<html><body>RustDesk Client</body></html>`"#.to_string() }",
          "#[inline]",
          "pub fn get_remote() -> String { r#`<html><body>Remote Control</body></html>`"#.to_string() }",
          "#[inline]",
          "pub fn get_install() -> String { r#`<html><body>Installation</body></html>`"#.to_string() }",
          "#[inline]",
          "pub fn get_chatbox() -> String { r#`<html><body>Chat</body></html>`"#.to_string() }",
          "#[inline]",
          "pub fn get_cm() -> String { r#`<html><body>Connection Manager</body></html>`"#.to_string() }"
        )
        $inlineContentLines | Out-File -FilePath "src\ui\inline.rs" -Encoding UTF8
        if (Test-Path "src\ui\inline.rs") { Write-Host "[SUCCESS] inline.rs module created and verified" } else { Write-Host "[ERROR] inline.rs module was not created"; exit 1 }

    - name: Build RustDesk
      shell: powershell
      run: |
        Write-Host "=== Building RustDesk ==="
        cd "$env:GITHUB_WORKSPACE\rustdesk"
        $env:VCPKG_ROOT = "C:\vcpkg"
        $env:VCPKG_DEFAULT_TRIPLET = "x64-windows-static"
        $env:LIBCLANG_PATH = "$env:PROGRAMFILES\LLVM\bin"
        $env:RUSTFLAGS = "-C target-feature=+crt-static"
        $env:RUST_BACKTRACE = "1"
        if ("${{ inputs.enable_debug }}" -eq "true") {
          Write-Host "Build mode: Debug"
          cargo build --features inline --verbose
        } else {
          Write-Host "Build mode: Release"
          cargo build --release --features inline --verbose
        }
        if ($LASTEXITCODE -ne 0) { Write-Host "[ERROR] Build failed with exit code $LASTEXITCODE"; exit $LASTEXITCODE }
        Write-Host "[SUCCESS] Build completed successfully!"
        
    - name: Prepare and Upload artifacts
      shell: powershell
      run: |
        Write-Host "=== Preparing artifacts ==="
        cd "$env:GITHUB_WORKSPACE\rustdesk"
        $executableName = "${{ inputs.executable_name }}"
        $buildDir = if ("${{ inputs.enable_debug }}" -eq "true") { "target\debug" } else { "target\release" }
        $builtExecutable = Get-ChildItem "$buildDir\*.exe" | Where-Object { $_.Name -like "*rustdesk*" } | Select-Object -First 1
        if (-not $builtExecutable) { Write-Host "[ERROR] No executable found in ${buildDir}"; exit 1 }
        $finalExePath = Join-Path $builtExecutable.DirectoryName "$executableName.exe"
        Copy-Item $builtExecutable.FullName $finalExePath -Force
        Write-Host "[SUCCESS] Artifact prepared at: $finalExePath"
        if ("${{ inputs.create_installer }}" -eq "true") {
          $config = '${{ inputs.config_json }}' | ConvertFrom-Json
          $installerContent = @"
        !define PRODUCT_NAME "$($config.branding.PRODUCT_NAME)"
        !define PRODUCT_PUBLISHER "$($config.branding.PRODUCT_NAME)"
        SetCompressor lzma
        RequestExecutionLevel admin
        Name "`$!{PRODUCT_NAME}`"
        OutFile "$($executableName)-installer.exe"
        InstallDir "`$PROGRAMFILES\`$!{PRODUCT_NAME}`"
        Section "MainSection" SEC01
          SetOutPath "`$INSTDIR`"
          File "$finalExePath"
          WriteUninstaller "`$INSTDIR\Uninstall.exe`"
        SectionEnd
        Section "Uninstall"
          Delete "`$INSTDIR\$executableName.exe`"
          Delete "`$INSTDIR\Uninstall.exe`"
          RMDir "`$INSTDIR`"
        SectionEnd
        "@
          $installerContent | Out-File -FilePath "installer.nsi" -Encoding UTF8
          & "C:\Program Files (x86)\NSIS\makensis.exe" "installer.nsi"
          if ($LASTEXITCODE -eq 0) { Write-Host "[SUCCESS] Installer created" } else { Write-Host "⚠️ Installer creation failed" }
        }
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-client-${{ inputs.executable_name }}
        path: |
          rustdesk/target/debug/${{ inputs.executable_name }}.exe
          rustdesk/target/release/${{ inputs.executable_name }}.exe
          rustdesk/${{ inputs.executable_name }}-installer.exe
        retention-days: 7
